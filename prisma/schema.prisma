generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PetStatus {
  AVAILABLE
  ADOPTED
  UNDER_TREATMENT
}

enum AdoptionStatus {
  ACTIVE
  COMPLETED
  CANCELED
}

model User {
  id        Int      @id @default(autoincrement())
  username  String
  email     String   @unique
  password  String
  createdAt DateTime @default(now()) @map("created_at")

  pets   Pet[]
  tokens RefreshToken[]

  @@map("user")
}

model Pet {
  id               Int       @id @default(autoincrement())
  name             String
  age              Int
  type             String
  race             String?
  currentWeight    Decimal?  @db.Decimal(10, 2)
  urlPhoto         String?   @map("url_photo")
  status           PetStatus @default(AVAILABLE)
  registrationDate DateTime  @map("registration_date") @db.Date

  userId Int?  @map("user_id")
  user   User? @relation(fields: [userId], references: [id])

  diaries          Daily[]
  medicalHistories MedicalHistory[]
  adoptions        Adoption[]

  @@index([userId])
  @@map("pets")
}

model Adopter {
  id        Int     @id @default(autoincrement())
  name      String
  email     String  @unique
  telephone String?
  address   String?

  adoptions Adoption[]

  @@map("adopter")
}

model Daily {
  id                Int      @id @default(autoincrement())
  petId             Int      @map("pets_id")
  dailyDate         DateTime @map("daily_date") @db.Date
  weight            Decimal? @db.Decimal(10, 2)
  notes             String?
  prescriptionNotes String?  @map("prescription_notes")

  pet Pet @relation(fields: [petId], references: [id])

  @@index([petId])
  @@map("daily")
}

model MedicalHistory {
  id           Int      @id @default(autoincrement())
  petId        Int      @map("pets_id")
  medicalDate  DateTime @map("medical_date") @db.Date
  veterinarian String?
  diagnosis    String?
  treatment    String?
  prescription String? // receita m√©dica + medicamentos descritos

  pet Pet @relation(fields: [petId], references: [id])

  @@index([petId])
  @@map("medicalHistory")
}

model Adoption {
  id        Int            @id @default(autoincrement())
  petId     Int            @map("pets_id")
  adopterId Int            @map("adopter_id")
  startDate DateTime       @map("start_date") @db.Date
  endDate   DateTime?      @map("end_date") @db.Date
  status    AdoptionStatus @default(ACTIVE)

  pet     Pet     @relation(fields: [petId], references: [id])
  adopter Adopter @relation(fields: [adopterId], references: [id])

  @@index([petId])
  @@index([adopterId])
  @@map("adoption")
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String // hashed secret
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  expiresAt DateTime @map("expires_at")
  revoked   Boolean  @default(false)

  @@index([userId])
  @@map("refresh_tokens")
}
